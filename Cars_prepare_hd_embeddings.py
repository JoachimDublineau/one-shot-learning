# -*- coding: utf-8 -*-
"""Cars_embeddings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrohK0DJFcfbfDdc8xkqBJCmkkZ_ndSA
"""

from google.colab import drive
drive.mount('drive')

from keras.models import Sequential, Model
from keras.layers import Input, Flatten, Dense, Dropout, Lambda
from keras.optimizers import RMSprop
from keras.preprocessing import image
from keras.applications.xception import preprocess_input
from keras import backend as K

import os
import time
import random
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import accuracy_score

# paths to load datasets
dir_path = 'drive/My Drive/car_dataset/'
data_path = dir_path + 'car_data/'
train_path = data_path + 'train/'
test_path = data_path + 'test/'

embedding_path = dir_path + 'embeddings/'

input_shape = (128, 128, 3)

"""## Function read data"""

def get_dir_images(dir_path):
  """return the differents categories, the images in these categories, and the number of images per category"""
  listDir = sorted(os.listdir(dir_path))
  size = []
  listFiles = []
  target = []
  for d in listDir :
    files = sorted(os.listdir(dir_path+'/'+d))
    size.append(len(files))
    files = [dir_path+'/'+d+'/'+f for f in files]
    target += [d] * len(files)
    listFiles += files
  return listFiles, target, size

"""## Functions: get trained model and embeddings"""

def get_model():
  return Xception(include_top=False, weights='imagenet', input_shape=input_shape, pooling='max')

def get_embeddings(files, model):
  t0 = time.time()
  embeddings = []
  nb = len(files)
  cpt = 0
  print('total number of files: ' + str(nb))
  for f in files :
    t1 = time.time()
    img = image.load_img(f, target_size=input_shape)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    embeddings.append(model.predict(x))
    t2 = time.time()
    cpt += 1
    print('embedding: {}/{}, time: {}s'.format(cpt,nb, t2-t1))
  print('total', t2 - t0)
  return embeddings

"""## get embeddings"""

model = get_model()

listFiles, target, size = get_dir_images(train_path)
embeddings = get_embeddings(listFiles, model)
np.save(embedding_path+'x_train.npy', embeddings)
np.save(embedding_path+'y_train.npy', target)

listFiles, target, size = get_dir_images(test_path)
embeddings = get_embeddings(listFiles, model)
np.save(embedding_path+'x_test.npy', embeddings)
np.save(embedding_path+'y_test.npy', target)

